id: astropy__astropy-8998
status:
  human: APPROVED
  llm: COMING_SOON
comparison:
  llm_better: COMING_SOON
repo:
  org: astropy
  name: astropy
  url: https://github.com/astropy/astropy
  pull_request: https://github.com/astropy/astropy/pull/8998
  base_commit: 387c3d28653706ad59e689bd3755b9e92f91305f
  created_at: '2019-07-15 1:34:23'
  version: '3.1'
workload:
  language: python
  code: "import timeit\nimport statistics\nimport numpy as np\n\ndef patch_numpy():\n\
    \n    for name, repl in [\n        (\"int\", int),\n        (\"float\", float),\n\
    \        (\"bool\", bool),\n        (\"object\", object),\n        (\"str\", str),\n\
    \        (\"long\", int),\n        (\"complex\", complex),\n        (\"unicode\"\
    , str),\n    ]:\n        if not hasattr(np, name):\n            setattr(np, name,\
    \ repl)\n            \n    if not hasattr(np, \"asscalar\"):\n        np.asscalar\
    \ = lambda a: a.item()\n    if not hasattr(np, \"alen\"):\n        np.alen = lambda\
    \ a: len(a)\n    if not hasattr(np, \"rank\"):\n        np.rank = lambda a: np.ndim(a)\n\
    \        \npatch_numpy()\nimport astropy.units as u\nfrom astropy.table import\
    \ MaskedColumn\n\ndef setup():\n    global m\n    m = MaskedColumn([1, 2])\n\n\
    def workload():\n    global m\n    m.info\n\nruntimes = timeit.repeat(workload,\
    \ number=1000, repeat=2000, setup = setup)\n\nprint(\"Mean:\", statistics.mean(runtimes[-1000:]))\n\
    print(\"Std Dev:\", statistics.stdev(runtimes[-1000:]))"
docker:
  base_image: docker.io/sweperf/sweperf:astropy__astropy-8998
  human_image: docker.io/sweperf/sweperf_annotate:astropy__astropy-8998
  llm_image: PLACEHOLDER
  commands:
    run_base: docker run --rm --name bench_{id}_base --mount type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py
      {base_image} /bin/bash -lc 'python /tmp/workload.py' 2>&1
    run_human: docker run --rm --name bench_{id}_human --mount type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py
      {human_image} /bin/bash -lc 'chmod +x /perf.sh && /perf.sh && python /tmp/workload.py'
      2>&1
    run_llm: echo 'LLM image not available yet for {id}. Please fill docker.llm_image.'
metrics:
  reducer: mean_std
  parse_regex:
    mean: (?i)\bMean:\s*([0-9.]+)
    std: (?i)(Std Dev|SD):\s*([0-9.]+)
notes:
  user_notes: 'Before Mean: 0.0011402966674650089

    Before SD: 3.8515040033626756e-05

    After Mean: 0.00027171488740714266

    After SD: 2.8878465755819313e-06

    Improvement: -76.17%'
  mike_notes: ''
meta:
  num_covering_tests: '87'
