id: pandas-dev__pandas-34354
status:
  human: APPROVED
  llm: COMING_SOON
comparison:
  llm_better: COMING_SOON
repo:
  org: pandas-dev
  name: pandas
  url: https://github.com/pandas-dev/pandas
  pull_request: https://github.com/pandas-dev/pandas/pull/34354
  base_commit: f5ab5a80a9193bdee50c661ce5a3abaabc312fd2
  created_at: '2020-05-24 14:09:46'
  version: '1'
workload:
  language: python
  code: "\nimport timeit\nimport statistics\n\nimport pandas as pd\nimport numpy as\
    \ np\n\ndef setup():\n    global value_df, ref_df\n    my_date_range = pd.date_range('20200101\
    \ 00:00', '20200102 0:00', freq='S')\n    level_0_names = list(str(i) for i in\
    \ range(30))\n    #level_0_names = list(range(30))\n    index = pd.MultiIndex.from_product([level_0_names,\
    \ my_date_range])\n    column_names = ['col_1', 'col_2']\n\n    # Building a df\
    \ that represents some value over time (think sensors)\n    # Indexed by sensor\
    \ and time \n    value_df = pd.DataFrame(np.random.rand(len(index),2), index=index,\
    \ columns=column_names)\n\n    # Build a reference df for the reference value\
    \ the sensor can take (like its max)\n    # Indexed by sensor\n    ref_df = pd.DataFrame(np.random.randint(1,\
    \ 10, (len(level_0_names), 2)), \n                    index = level_0_names, \n\
    \                    columns=column_names)\n\n\ndef workload():\n    global value_df,\
    \ ref_df\n    value_df.sub(ref_df, level=0)\n\nruntimes = timeit.repeat(workload,\
    \ number=1, repeat=5, setup=setup)\n\nprint(\"Mean:\", statistics.mean(runtimes))\n\
    print(\"Std Dev:\", statistics.stdev(runtimes))"
docker:
  base_image: docker.io/sweperf/sweperf:pandas-dev__pandas-34354
  human_image: docker.io/sweperf/sweperf_annotate:pandas-dev__pandas-34354
  llm_image: PLACEHOLDER
  commands:
    run_base: docker run --rm --name bench_{id}_base --mount type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py
      {base_image} /bin/bash -lc 'python /tmp/workload.py' 2>&1
    run_human: docker run --rm --name bench_{id}_human --mount type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py
      {human_image} /bin/bash -lc 'chmod +x /perf.sh && /perf.sh && python /tmp/workload.py'
      2>&1
    run_llm: echo 'LLM image not available yet for {id}. Please fill docker.llm_image.'
metrics:
  reducer: mean_std
  parse_regex:
    mean: (?i)\bMean:\s*([0-9.]+)
    std: (?i)(Std Dev|SD):\s*([0-9.]+)
notes:
  user_notes: 'Before Mean: 4.691541911987588

    Before SD: 0.029409793902081604

    After Mean: 0.06123485181014985

    After SD: 0.006039007532545855

    Improvement: -98.69%'
  mike_notes: ''
meta:
  num_covering_tests: '142'
