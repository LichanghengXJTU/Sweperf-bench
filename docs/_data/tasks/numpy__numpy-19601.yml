id: numpy__numpy-19601
status:
  human: APPROVED
  llm: COMING_SOON
comparison:
  llm_better: COMING_SOON
repo:
  org: numpy
  name: numpy
  url: https://github.com/numpy/numpy
  pull_request: https://github.com/numpy/numpy/pull/19601
  base_commit: f25905b5d25a2fca1e23adad11d4597a1e658276
  created_at: '2021-08-02 20:39:29'
  version: '1.21'
workload:
  language: python
  code: "import timeit\nimport statistics\n\nimport numpy as np\nfrom io import StringIO\n\
    \n\nnum_lines_comments = int(1e5)\ndata = ['1,2,3 # comment'] * num_lines_comments\n\
    data_comments = StringIO('\\n'.join(data))\n\nnum_lines_dtypes = int(1e5)\ndata\
    \ = ['5, 7, 888'] * num_lines_dtypes\ncsv_data_dtypes = StringIO('\\n'.join(data))\n\
    \ndata = [\"M, 21, 72, X, 155\"] * 50000\ncsv_data_structured = StringIO('\\n'.join(data))\n\
    \nnp.random.seed(123)\ntest_array = np.random.rand(100000, 3)\nskiprows_fname\
    \ = 'test_array.csv'\nnp.savetxt(fname=skiprows_fname, X=test_array, delimiter=',')\n\
    \nsize_uint64 = 10000\narr = np.arange(size_uint64).astype('uint64') + 2**63\n\
    uint64_data1 = StringIO('\\n'.join(arr.astype(str).tolist()))\narr = arr.astype(object)\n\
    arr[500] = -1\nuint64_data2 = StringIO('\\n'.join(arr.astype(str).tolist()))\n\
    \ndata = ['0, 1, 2, 3, 4, 5, 6, 7, 8, 9'] * 5000\ncsv_data_usecols = StringIO('\\\
    n'.join(data))\n\ndates = np.arange('2020-01-01', '2020-01-21', dtype='datetime64[D]')\n\
    np.random.seed(123)\nvalues = np.random.rand(20)\ndate_line = ''.join(f\"{str(date)},{value}\\\
    n\" for date, value in zip(dates, values))\ndata = date_line * (20000 // 20)\n\
    csv_data_datetime = StringIO(data)\n\n\ndef workload():\n    np.loadtxt(data_comments,\
    \ delimiter=',')\n    data_comments.seek(0)\n\n    np.loadtxt(csv_data_dtypes,\
    \ delimiter=',', dtype='object')\n    csv_data_dtypes.seek(0)\n\n    np.loadtxt(csv_data_structured,\
    \ delimiter=',', dtype=[\n        ('category_1', 'S1'),\n        ('category_2',\
    \ 'i4'),\n        ('category_3', 'f8'),\n        ('category_4', 'S1'),\n     \
    \   ('category_5', 'f8')])\n    csv_data_structured.seek(0)\n\n    np.loadtxt(skiprows_fname,\
    \ delimiter=',', skiprows=10000)\n\n    np.loadtxt(uint64_data1)\n    uint64_data1.seek(0)\n\
    \n    np.loadtxt(uint64_data2)\n    uint64_data2.seek(0)\n\n    np.loadtxt(csv_data_usecols,\
    \ delimiter=',', usecols=[1, 3, 5, 7])\n    csv_data_usecols.seek(0)\n\n    np.loadtxt(csv_data_datetime,\n\
    \               delimiter=',',\n               dtype=[('dates', 'M8[us]'), ('values',\
    \ 'float64')])\n    csv_data_datetime.seek(0)\n\n\nruntimes = timeit.repeat(workload,\
    \ number=1, repeat=25)\n\nprint(\"Mean:\", statistics.mean(runtimes))\nprint(\"\
    Std Dev:\", statistics.stdev(runtimes))\n"
docker:
  base_image: docker.io/sweperf/sweperf:numpy__numpy-19601
  human_image: docker.io/sweperf/sweperf_annotate:numpy__numpy-19601
  llm_image: PLACEHOLDER
  commands:
    run_base: docker run --rm --name bench_{id}_base --mount type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py
      {base_image} /bin/bash -lc 'python /tmp/workload.py' 2>&1
    run_human: docker run --rm --platform linux/amd64 --name bench_{id}_human --mount
      type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py {human_image} /bin/bash -lc
      'chmod +x /perf.sh && git apply /tmp/patch.diff && /perf.sh' 2>&1
    run_llm: echo 'LLM image not available yet for {id}. Please fill docker.llm_image.'
metrics:
  reducer: mean_std
  parse_regex:
    mean: (?i)\bMean:\s*([0-9.]+)
    std: (?i)(Std Dev|SD):\s*([0-9.]+)
notes:
  user_notes: 'Before Mean: 1.3381418218032923

    Before SD: 0.00646591014336387

    After Mean: 1.299994302765699

    After SD: 0.004716111624293895

    Improvement: -2.85%'
  mike_notes: ''
meta:
  num_covering_tests: '179'
