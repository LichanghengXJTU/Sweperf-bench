id: astropy__astropy-8349
status:
  human: APPROVED
  llm: COMING_SOON
comparison:
  llm_better: COMING_SOON
repo:
  org: astropy
  name: astropy
  url: https://github.com/astropy/astropy
  pull_request: https://github.com/astropy/astropy/pull/8349
  base_commit: 998f666b8349cf758eceb1fc140d9b8e7258ff88
  created_at: '2019-01-15 16:27:36'
  version: '3'
workload:
  language: python
  code: "import timeit\nimport statistics\n\nfrom astropy.modeling import models,\
    \ fitting\nfrom astropy import units as u\nimport numpy as np\n\nn = 22\nx0 =\
    \ np.random.rand(n) * 100\ny0 = np.random.rand(n) * 100\nxstd = np.random.rand(n)\
    \ * 5\nystd = np.random.rand(n) * 5\n\ndef setup():\n    global model, out\n \
    \   model = None\n    for x_mean, y_mean, x_stddev, y_stddev in zip(x0, y0, xstd,\
    \ ystd):\n        gauss = models.Gaussian2D(x_mean=x_mean, y_mean=y_mean, x_stddev=x_stddev,\
    \ y_stddev=y_stddev)\n        if model is None:\n            model = gauss\n \
    \       else:\n            model += gauss\n\n    out = np.zeros((100, 100))\n\n\
    def workload():\n    global model, out\n    model.render(out)\n\nruntimes = timeit.repeat(workload,\
    \ number=1, repeat=25, setup=setup)\n\n# Print runtime mean and std deviation.\n\
    print(\"Mean:\", statistics.mean(runtimes))\nprint(\"Std Dev:\", statistics.stdev(runtimes))\n"
docker:
  base_image: docker.io/sweperf/sweperf:astropy__astropy-8349
  human_image: docker.io/sweperf/sweperf_annotate:astropy__astropy-8349
  llm_image: PLACEHOLDER
  commands:
    run_base: docker run --rm --name bench_{id}_base --mount type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py
      {base_image} /bin/bash -lc 'python /tmp/workload.py' 2>&1
    run_human: docker run --rm --platform linux/amd64 --name bench_{id}_human --mount
      type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py {human_image} /bin/bash -lc
      'chmod +x /perf.sh && git apply /tmp/patch.diff && /perf.sh' 2>&1
    run_llm: echo 'LLM image not available yet for {id}. Please fill docker.llm_image.'
metrics:
  reducer: mean_std
  parse_regex:
    mean: (?i)\bMean:\s*([0-9.]+)
    std: (?i)(Std Dev|SD):\s*([0-9.]+)
notes:
  user_notes: 'Before Mean: 2.3348988196835854

    Before SD: 0.02035387990199112

    After Mean: 0.005130455642938614

    After SD: 9.148367751179334e-05

    Improvement: -99.78%'
  mike_notes: ''
meta:
  num_covering_tests: '22'
