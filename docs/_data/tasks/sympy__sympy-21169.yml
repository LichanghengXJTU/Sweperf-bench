id: sympy__sympy-21169
status:
  human: APPROVED
  llm: COMING_SOON
comparison:
  llm_better: COMING_SOON
repo:
  org: sympy
  name: sympy
  url: https://github.com/sympy/sympy
  pull_request: https://github.com/sympy/sympy/pull/21169
  base_commit: aa22709cb7df2d7503803d4b2c0baa7aa21440b6
  created_at: '2021-03-25 22:32:56'
  version: '1.8'
workload:
  language: python
  code: "import timeit\nimport statistics\nfrom sympy import symbols, sqrt\nfrom sympy\
    \ import linsolve\nfrom sympy.printing.pretty.pretty import PrettyPrinter\nfrom\
    \ sympy import pretty\n\nfrom sympy.core.cache import clear_cache\n\ndef setup():\n\
    \    global s\n    clear_cache()\n    xs = symbols('x:1000')\n    eqs = [x1 +\
    \ sqrt(2)*x2 for x1, x2 in zip(xs[:-1], xs[1:])]\n    eqs.append(xs[-1] - sqrt(3))\n\
    \    s = linsolve(eqs, xs)\n\ndef workload():\n    global s\n    _ = pretty(s)\n\
    \nruntimes = timeit.repeat(workload, number=1, repeat=10, setup=setup)\n\nprint(\"\
    Mean:\", statistics.mean(runtimes))\nprint(\"Std Dev:\", statistics.stdev(runtimes))"
docker:
  base_image: docker.io/sweperf/sweperf:sympy__sympy-21169
  human_image: docker.io/sweperf/sweperf_annotate:sympy__sympy-21169
  llm_image: PLACEHOLDER
  commands:
    run_base: docker run --rm --name bench_{id}_base --mount type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py
      {base_image} /bin/bash -lc 'python /tmp/workload.py' 2>&1
    run_human: docker run --rm --platform linux/amd64 --name bench_{id}_human --mount
      type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py {human_image} /bin/bash -lc
      'chmod +x /perf.sh && git apply /tmp/patch.diff && /perf.sh' 2>&1
    run_llm: echo 'LLM image not available yet for {id}. Please fill docker.llm_image.'
metrics:
  reducer: mean_std
  parse_regex:
    mean: (?i)\bMean:\s*([0-9.]+)
    std: (?i)(Std Dev|SD):\s*([0-9.]+)
notes:
  user_notes: 'Before Mean: 14.107108374196105

    Before SD: 0.03605927275373433

    After Mean: 4.100844361493364

    After SD: 0.03388947195174079

    Improvement: -70.93%'
  mike_notes: ''
meta:
  num_covering_tests: '1'
