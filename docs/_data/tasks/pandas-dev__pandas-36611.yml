id: pandas-dev__pandas-36611
status:
  human: APPROVED
  llm: COMING_SOON
comparison:
  llm_better: COMING_SOON
repo:
  org: pandas-dev
  name: pandas
  url: https://github.com/pandas-dev/pandas
  pull_request: https://github.com/pandas-dev/pandas/pull/36611
  base_commit: f34fe6244e941c8701f9c0d243277ff075c58f05
  created_at: '2020-09-24 20:16:34'
  version: '1.1'
workload:
  language: python
  code: "\nimport timeit\nimport statistics\n\nimport pandas as pd\nimport numpy as\
    \ np\n\nN = 10 ** 7\ndtypes = [\"int64\", \"int32\", \"float64\", \"float32\"\
    , \"object\"]\nmax_number = 1000\nseries_type = [\"random_hits\", \"random_misses\"\
    , \"monotone_hits\", \"monotone_misses\"]\n\nseries_value_tuples_to_run = []\n\
    for dtype in dtypes:\n    for series in series_type:\n        if series == \"\
    random_hits\":\n            np.random.seed(42)\n            array = np.random.randint(0,\
    \ max_number, N)\n        if series == \"random_misses\":\n            np.random.seed(42)\n\
    \            array = np.random.randint(0, max_number, N) + max_number\n      \
    \  if series == \"monotone_hits\":\n            array = np.repeat(np.arange(max_number),\
    \ N // max_number)\n        if series == \"monotone_misses\":\n            array\
    \ = np.arange(N) + max_number\n            \n        series = pd.Series(array).astype(dtype)\n\
    \        values = np.arange(max_number).astype(dtype)\n        series_value_tuples_to_run.append((series,\
    \ values))\n\n\ndef workload():\n    for series, values in series_value_tuples_to_run:\n\
    \        _ = series.isin(values)\n    \nruntimes = timeit.repeat(workload, number=1,\
    \ repeat=3)\n\nprint(\"Mean:\", statistics.mean(runtimes))\nprint(\"Std Dev:\"\
    , statistics.stdev(runtimes))"
docker:
  base_image: docker.io/sweperf/sweperf:pandas-dev__pandas-36611
  human_image: docker.io/sweperf/sweperf_annotate:pandas-dev__pandas-36611
  llm_image: PLACEHOLDER
  commands:
    run_base: docker run --rm --name bench_{id}_base --mount type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py
      {base_image} /bin/bash -lc 'python /tmp/workload.py' 2>&1
    run_human: docker run --rm --platform linux/amd64 --name bench_{id}_human --mount
      type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py {human_image} /bin/bash -lc
      'chmod +x /perf.sh && git apply -q /tmp/patch.diff && /perf.sh' 2>&1
    run_llm: echo 'LLM image not available yet for {id}. Please fill docker.llm_image.'
metrics:
  reducer: mean_std
  parse_regex:
    mean: (?i)\bMean:\s*([0-9.]+)
    std: (?i)(Std Dev|SD):\s*([0-9.]+)
notes:
  user_notes: 'Before Mean: 7.613361887692008

    Before SD: 0.024567379980292528

    After Mean: 5.936274504327836

    After SD: 0.06007440123701428

    Improvement: -22.03%'
  mike_notes: ''
meta:
  num_covering_tests: '93'
