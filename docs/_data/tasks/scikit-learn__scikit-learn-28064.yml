id: scikit-learn__scikit-learn-28064
status:
  human: APPROVED
  llm: COMING_SOON
comparison:
  llm_better: COMING_SOON
repo:
  org: scikit-learn
  name: scikit-learn
  url: https://github.com/scikit-learn/scikit-learn
  pull_request: https://github.com/scikit-learn/scikit-learn/pull/28064
  base_commit: 619a1c1028335e9fa7abd4d7fb6477200a4bce67
  created_at: '2024-01-04 19:58:37'
  version: '1.6'
workload:
  language: python
  code: "import timeit\nimport statistics\n\nimport numpy as np\n\nfrom sklearn.datasets\
    \ import make_classification\nfrom sklearn.ensemble._hist_gradient_boosting.binning\
    \ import _BinMapper\n\nn_samples, n_features = 200_000, 20\nn_bins = 256\n\nX,\
    \ y = make_classification(n_samples=n_samples, n_features=n_features)\ncategorical_remapped\
    \ = np.zeros(n_features, dtype=bool)\n\ndef setup():\n    global bin_mapper, bin_mapper_multithread\n\
    \    bin_mapper = _BinMapper(\n        n_bins=n_bins,\n        is_categorical=categorical_remapped,\n\
    \        known_categories=None,\n        random_state=1,\n        n_threads=1,\n\
    \    )\n    bin_mapper_multithread = _BinMapper(\n        n_bins=n_bins,\n   \
    \     is_categorical=categorical_remapped,\n        known_categories=None,\n \
    \       random_state=1,\n        n_threads=4,\n    )\n\ndef workload():\n    bin_mapper.fit(X)\
    \ \n    bin_mapper.fit_transform(X)  \n    bin_mapper_multithread.fit(X)  \n \
    \   bin_mapper_multithread.fit_transform(X)\n    \nruntimes = timeit.repeat(workload,\
    \ number=1, repeat=10, setup=setup)\n\nprint(\"Mean:\", statistics.mean(runtimes))\n\
    print(\"Std Dev:\", statistics.stdev(runtimes))\n"
docker:
  base_image: docker.io/sweperf/sweperf:scikit-learn__scikit-learn-28064
  human_image: docker.io/sweperf/sweperf_annotate:scikit-learn__scikit-learn-28064
  llm_image: PLACEHOLDER
  commands:
    run_base: docker run --rm --name bench_{id}_base --mount type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py
      {base_image} /bin/bash -lc 'python /tmp/workload.py' 2>&1
    run_human: docker run --rm --name bench_{id}_human --mount type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py
      {human_image} /bin/bash -lc 'chmod +x /perf.sh && /perf.sh && python /tmp/workload.py'
      2>&1
    run_llm: echo 'LLM image not available yet for {id}. Please fill docker.llm_image.'
metrics:
  reducer: mean_std
  parse_regex:
    mean: (?i)\bMean:\s*([0-9.]+)
    std: (?i)(Std Dev|SD):\s*([0-9.]+)
notes:
  user_notes: 'Before Mean: 2.2634158101922366

    Before SD: 0.18599544721779207

    After Mean: 1.6149811484967358

    After SD: 0.20400766332517428

    Improvement: -28.65%'
  mike_notes: ''
meta:
  num_covering_tests: '8'
