id: pydata__xarray-4740
status:
  human: APPROVED
  llm: COMING_SOON
comparison:
  llm_better: COMING_SOON
repo:
  org: pydata
  name: xarray
  url: https://github.com/pydata/xarray
  pull_request: https://github.com/pydata/xarray/pull/4740
  base_commit: 1c198a191127c601d091213c4b3292a8bb3054e1
  created_at: '2020-12-29 19:03:59'
  version: '0.12'
workload:
  language: python
  code: "import timeit as timeit\nimport statistics\n\nimport xarray as xr\nimport\
    \ numpy as np\nimport dask.array as da\n\ndef setup():\n    global ds0\n    a\
    \ = np.arange(0, 2000)\n    b = np.core.defchararray.add(\"long_variable_name\"\
    , a.astype(str))\n    coords = dict(time=da.array([0, 1]))\n    data_vars = dict()\n\
    \    for v in b:\n        data_vars[v] = xr.DataArray(\n            name=v,\n\
    \            data=da.array([3, 4]),\n            dims=[\"time\"],\n          \
    \  coords=coords\n        )\n    ds0 = xr.Dataset(data_vars)\n\ndef workload():\n\
    \    global ds0\n    ds0.interp(\n        time=da.array([0, 0.5, 1]),\n      \
    \  assume_sorted=True,\n        kwargs=dict(fill_value=None),\n    )\n    \nruntimes\
    \ = timeit.repeat(workload, number=1, repeat=5, setup=setup)\n\n# Print runtime\
    \ mean and std deviation.\nprint(\"Mean:\", statistics.mean(runtimes))\nprint(\"\
    Std Dev:\", statistics.stdev(runtimes))"
docker:
  base_image: docker.io/sweperf/sweperf:pydata__xarray-4740
  human_image: docker.io/sweperf/sweperf_annotate:pydata__xarray-4740
  llm_image: PLACEHOLDER
  commands:
    run_base: docker run --rm --name bench_{id}_base --mount type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py
      {base_image} /bin/bash -lc 'python /tmp/workload.py' 2>&1
    run_human: docker run --rm --platform linux/amd64 --name bench_{id}_human --mount
      type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py {human_image} /bin/bash -lc
      'chmod +x /perf.sh && git apply -q /tmp/patch.diff && /perf.sh' 2>&1
    run_llm: echo 'LLM image not available yet for {id}. Please fill docker.llm_image.'
metrics:
  reducer: mean_std
  parse_regex:
    mean: (?i)\bMean:\s*([0-9.]+)
    std: (?i)(Std Dev|SD):\s*([0-9.]+)
notes:
  user_notes: 'Before Mean: 2.8775395602337084

    Before SD: 0.025426707784638482

    After Mean: 0.7952919595991261

    After SD: 0.008703074079617056

    Improvement: -72.36%'
  mike_notes: ''
meta:
  num_covering_tests: '3'
