id: pandas-dev__pandas-42841
status:
  human: APPROVED
  llm: COMING_SOON
comparison:
  llm_better: COMING_SOON
repo:
  org: pandas-dev
  name: pandas
  url: https://github.com/pandas-dev/pandas
  pull_request: https://github.com/pandas-dev/pandas/pull/42841
  base_commit: 098661e8773dc2026f89ec39ca87625c2fb870dd
  created_at: '2021-08-01 15:24:08'
  version: '1.3'
workload:
  language: python
  code: "import timeit\nimport statistics\n\nimport pandas as pd\nimport numpy as\
    \ np\n\nmethods = [\"any\", \"all\"]\n\nngroups = 1000\nncols = 10\nsize = ngroups\
    \ * 2\nrng = np.arange(ngroups).reshape(-1, 1)\nrng = np.broadcast_to(rng, (len(rng),\
    \ ncols))\ntaker = np.random.randint(0, ngroups, size=size)\nvalues = rng.take(taker,\
    \ axis=0)\nkey = np.concatenate(\n    [np.random.random(ngroups) * 0.1, np.random.random(ngroups)\
    \ * 10.0]\n)\n\ncols = [f\"values{n}\" for n in range(ncols)]\ndf = pd.DataFrame(values,\
    \ columns=cols)\ndf[\"key\"] = key\n\ndef workload():\n    for method in methods:\n\
    \        df.groupby(\"key\")[cols].transform(method)\n        getattr(df.groupby(\"\
    key\")[cols], method)\n\nruntimes = timeit.repeat(workload, number=5, repeat=1000)\n\
    \n# Print runtime mean and std deviation.\nprint(\"Mean:\", statistics.mean(runtimes))\n\
    print(\"Std Dev:\", statistics.stdev(runtimes))\n"
docker:
  base_image: docker.io/sweperf/sweperf:pandas-dev__pandas-42841
  human_image: docker.io/sweperf/sweperf_annotate:pandas-dev__pandas-42841
  llm_image: PLACEHOLDER
  commands:
    run_base: docker run --rm --name bench_{id}_base --mount type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py
      {base_image} /bin/bash -lc 'python /tmp/workload.py' 2>&1
    run_human: docker run --rm --name bench_{id}_human --mount type=bind,src=<WORKLOAD_PY>,dst=/tmp/workload.py
      {human_image} /bin/bash -lc 'chmod +x /perf.sh && /perf.sh && python /tmp/workload.py'
      2>&1
    run_llm: echo 'LLM image not available yet for {id}. Please fill docker.llm_image.'
metrics:
  reducer: mean_std
  parse_regex:
    mean: (?i)\bMean:\s*([0-9.]+)
    std: (?i)(Std Dev|SD):\s*([0-9.]+)
notes:
  user_notes: 'Before Mean: 0.021944661037239712

    Before SD: 0.0002597048817873614

    After Mean: 0.012127154016518035

    After SD: 0.00019524988632500171

    Improvement: -44.74%'
  mike_notes: ''
meta:
  num_covering_tests: '861'
